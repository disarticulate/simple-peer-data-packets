{"version":3,"file":"simple-peer-data-packets.min.js","sources":["../src/SimplePeerDataPackets.js","../src/index.js"],"sourcesContent":["const { Int64BE } = require('./int64-buffer.min.js')\n\nconst CHUNK_SIZE = (1024 * 16) - 512 // 16KB - data header\nconst TX_SEND_TTL = 1000 * 30 // 30 seconds\nconst MAX_BUFFERED_AMOUNT = 64 * 1024 // simple peer value\nconst defaultOpts = {\n   chunkSize: CHUNK_SIZE,\n   txSendTTL: TX_SEND_TTL,\n   maxBufferedAmount: MAX_BUFFERED_AMOUNT\n}\n\n\nfunction concatenate (Constructor, arrays) {\n  let totalLength = 0\n  for (const arr of arrays) totalLength += arr.length\n  const result = new Constructor(totalLength)\n  let offset = 0\n  for (const arr of arrays) {\n    result.set(arr, offset)\n    offset += arr.length\n  }\n  return result\n}\n\nclass SimplePeerDataPackets {\n  constructor (opts = defaultOpts) {\n    this._opts = Object.assign({}, opts, defaultOpts)\n    this._txOrdinal = 0\n    this._rxPackets = []\n    this._txPause = false\n    this.webRTCMessageQueue = []\n    this.webRTCPaused = false\n  }\n\n  get chunkSize () { return this._opts.chunkSize }\n  get txSendTTL () { return this._opts.txSendTTL }\n  get maxBufferedAmount () { return this._opts.maxBufferedAmount }\n\n  encodePacket ({ chunk, txOrd, index, length, totalSize, chunkSize }) {\n    const encoded = concatenate(Uint8Array, [\n      new Uint8Array(new Int64BE(txOrd).toArrayBuffer()), // 8 bytes\n      new Uint8Array(new Int64BE(index).toArrayBuffer()), // 8 bytes\n      new Uint8Array(new Int64BE(length).toArrayBuffer()), // 8 bytes\n      new Uint8Array(new Int64BE(totalSize).toArrayBuffer()), // 8 bytes\n      new Uint8Array(new Int64BE(chunkSize).toArrayBuffer()), // 8 bytes\n      chunk // CHUNK_SIZE\n    ])\n    return encoded\n  }\n\n  decodePacket (array) {\n    return {\n      txOrd: new Int64BE(array.slice(0, 8)).toNumber(),\n      index: new Int64BE(array.slice(8, 16)).toNumber(),\n      length: new Int64BE(array.slice(16, 24)).toNumber(),\n      totalSize: new Int64BE(array.slice(24, 32)).toNumber(),\n      chunkSize: new Int64BE(array.slice(32, 40)).toNumber(),\n      chunk: array.slice(40)\n    }\n  }\n\n  packetArray (array, size) {\n    const txOrd = this._txOrdinal\n    this._txOrdinal++\n    const chunkedArr = []\n    const totalSize = array.length || array.byteLength\n    let index = 0\n    while (index < totalSize) {\n      chunkedArr.push(array.slice(index, size + index))\n      index += size\n    }\n    return chunkedArr.map((chunk, index) => {\n      return this.encodePacket({\n        chunk,\n        txOrd,\n        index,\n        totalSize,\n        length: chunkedArr.length,\n        chunkSize: chunk.byteLength\n      })\n    })\n  }\n\n  _onChannelMessage (event) {\n    const { data } = event\n    const packet = this.decodePacket(data)\n    if (packet.chunk instanceof ArrayBuffer) packet.chunk = new Uint8Array(packet.chunk)\n    if (packet.chunkSize === packet.totalSize) {\n      this.push(packet.chunk)\n    } else {\n      const data = this._rxPackets.filter((p) => p.txOrd === packet.txOrd)\n      data.push(packet)\n      const indices = data.map(p => p.index)\n      if (new Set(indices).size === packet.length) {\n        data.sort(this.sortPacketArray)\n        const chunks = concatenate(Uint8Array, data.map(p => p.chunk))\n        this.push(chunks)\n        setTimeout(() => { this._rxPackets = this._rxPackets.filter((p) => p.txOrd !== packet.txOrd) }, this.txSendTTL)\n      } else {\n        this._rxPackets.push(packet)\n      }\n    }\n  }\n\n  sortPacketArray (a, b) { return a.index > b.index ? 1 : -1 }\n  send (chunk) {\n    if (chunk instanceof ArrayBuffer) chunk = new Uint8Array(chunk)\n    const chunks = this.packetArray(chunk, this.chunkSize)\n    this.webRTCMessageQueue = this.webRTCMessageQueue.concat(chunks)\n    if (this.webRTCPaused) return\n    this.sendMessageQueued()\n  }\n\n  sendMessageQueued () {\n    this.webRTCPaused = false\n    let message = this.webRTCMessageQueue.shift()\n    while (message) {\n      if (this._channel.bufferedAmount && this._channel.bufferedAmount > this.maxBufferedAmount) {\n        this.webRTCPaused = true\n        this.webRTCMessageQueue.unshift(message)\n        const listener = () => {\n          this._channel.removeEventListener('bufferedamountlow', listener)\n          this.sendMessageQueued()\n        }\n        this._channel.addEventListener('bufferedamountlow', listener)\n        return\n      }\n      try {\n        super.send(message)\n        message = this.webRTCMessageQueue.shift()\n      } catch (error) {\n        console.warn(error)\n      }\n    }\n  }\n}\n\nexport default SimplePeerDataPackets\n","import SimplePeerDataPackets from './SimplePeerDataPackets'\nexport const wrapSimplePeer = (simplepeer, opts) => {\n  return Object.assign(simplepeer, new SimplePeerDataPackets(opts))\n}\nexport {\n  SimplePeerDataPackets\n}\nexport default wrapSimplePeer"],"names":["Int64BE","require","defaultOpts","chunkSize","txSendTTL","maxBufferedAmount","concatenate","Constructor","arrays","totalLength","length","result","offset","arr","set","SimplePeerDataPackets","opts","_opts","Object","assign","_txOrdinal","_rxPackets","_txPause","webRTCMessageQueue","webRTCPaused","this","chunk","txOrd","index","totalSize","Uint8Array","toArrayBuffer","array","slice","toNumber","size","chunkedArr","byteLength","push","map","_this","encodePacket","event","data","packet","decodePacket","ArrayBuffer","filter","p","indices","Set","sort","sortPacketArray","chunks","setTimeout","_this2","a","b","packetArray","concat","sendMessageQueued","message","shift","_channel","bufferedAmount","_this3","unshift","addEventListener","listener","removeEventListener","error","console","warn","wrapSimplePeer","simplepeer"],"mappings":"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"}